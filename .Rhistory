DF_TEST <- as.data.frame(test_list['TEST'])
}
# Test and Control List
for (k in 1:nrow(DF_TEST)) {
#k = 2
n = 5
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
#rm(CONTROL_STR_LIST_1)
}
# Output list of Test and Controls
return(CONTROL_STR_LIST)
# assign( CONTROL_STR_LIST, paste0("Randomized Selection_seed_",rand_num), envir = .GlobalEnv #)
}
test_list <- tribble(~"TEST","Colorado")
TOPN_CONTROL_LIST <- topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
tail(TOPN_CONTROL_LIST)
rm(TOPN_CONTROL_LIST)
TOPN_CONTROL_LIST <- topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
test_list <- tribble(~"TEST","Colorado")
rm(TOPN_CONTROL_LIST)
TOPN_CONTROL_LIST <- topn_numeric(df, n = 5, test_list = test_list)
test_list
rm(DF_TEST)
rm(k)
rm(n)
rm(TOPN_CONTROL_LIST)
rm(list = ls())
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(USArrests)) %>%
dplyr::select(state, everything())
test_list <- tribble(~"TEST","Colorado")
topn_numeric <- function ( df, n = 5 , test_list = NULL ) {
# Prep for Distance: Convert column #1 to rownames and scale the dataset
rownames(df) <- df[,1]
df_scaled <- scale(df[,-1])
#---- Build the Distant Matrix----
DF_DIST <- dist(df_scaled , method = "euclidian")
# Convert to Matrix
DF_RANK_BASE <- as.matrix(DF_DIST)
# Keep the full matrix for addressing duplicates: Force NA to diagonal
diag(DF_RANK_BASE) <- NA
#----Produce list of one to one distance Metric----
DF_RANK_BASE_1 <- reshape2::melt(DF_RANK_BASE)
names(DF_RANK_BASE_1) <- c("CONTROL","TEST","DIST_Q")
DF_DIST_FINAL <- DF_RANK_BASE_1 %>% na.omit() %>%
dplyr::arrange(TEST,DIST_Q,CONTROL)
##----PART #2----------------------------------------------------------
# RANDOMLY SELECT THE TOP N LIST/DF OF THE CONTROL GROUPS FOR 1 TEST GROUP
#set.seed(17)
if( is.null(test_list)) {
stop(
'Please provide a dataframe for the test_list parameter with 1 Test group or individual in a column named "TEST."\n
See documentation for topn_numeric\'s test_list parameter'
)
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
# Test and Control List
for (k in 1:nrow(DF_TEST)) {
#k = 2
n = 5
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
#rm(CONTROL_STR_LIST_1)
}
# Output list of Test and Controls
return(CONTROL_STR_LIST)
# assign( CONTROL_STR_LIST, paste0("Randomized Selection_seed_",rand_num), envir = .GlobalEnv #)
}
TOPN_CONTROL_LIST <- topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
test_list <- df %>% select(state) %>% rename(TEST = state)
TOPN_CONTROL_LIST <- topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
TOPN_CONTROL_LIST <- topn_numeric(df, n = 10, test_list = test_list)
TOPN_CONTROL_LIST
TOPN_CONTROL_LIST <- topn_numeric(df, n = 10, test_list = test_list)
rm(TOPN_CONTROL_LIST)
TOPN_CONTROL_LIST <- topn_numeric(df, n = 10, test_list = test_list)
topn_numeric <- function ( df, n = 5 , test_list = NULL ) {
# Prep for Distance: Convert column #1 to rownames and scale the dataset
rownames(df) <- df[,1]
df_scaled <- scale(df[,-1])
#---- Build the Distant Matrix----
DF_DIST <- dist(df_scaled , method = "euclidian")
# Convert to Matrix
DF_RANK_BASE <- as.matrix(DF_DIST)
# Keep the full matrix for addressing duplicates: Force NA to diagonal
diag(DF_RANK_BASE) <- NA
#----Produce list of one to one distance Metric----
DF_RANK_BASE_1 <- reshape2::melt(DF_RANK_BASE)
names(DF_RANK_BASE_1) <- c("CONTROL","TEST","DIST_Q")
DF_DIST_FINAL <- DF_RANK_BASE_1 %>% na.omit() %>%
dplyr::arrange(TEST,DIST_Q,CONTROL)
##----PART #2----------------------------------------------------------
# RANDOMLY SELECT THE TOP N LIST/DF OF THE CONTROL GROUPS FOR 1 TEST GROUP
#set.seed(17)
if( is.null(test_list)) {
stop(
'Please provide a dataframe for the test_list parameter with 1 Test group or individual in a column named "TEST."\n
See documentation for topn_numeric\'s test_list parameter'
)
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
# Test and Control List
for (k in 1:nrow(DF_TEST)) {
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
#rm(CONTROL_STR_LIST_1)
}
# Output list of Test and Controls
return(CONTROL_STR_LIST)
# assign( CONTROL_STR_LIST, paste0("Randomized Selection_seed_",rand_num), envir = .GlobalEnv #)
}
TOPN_CONTROL_LIST <- topn_numeric(df, n = 10, test_list = test_list)
TOPN_CONTROL_LIST
rm(list = ls())
library(TestContR)
library(TestContR)
search()
library(tidyverse)
library(magrittr)
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
TEST_CONTROL_LIST <- TestContR::match_numeric(df, n = 15)
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
df
TEST_CONTROL_LIST <- TestContR::match_numeric(df, n = 15)
n <- 5
rownames(df) <- df[,1]
df_scaled <- scale(df[,-1])
#---- Build the Distant Matrix----
DF_DIST <- dist(df_scaled , method = "euclidian")
# Convert to Matrix
DF_RANK_BASE <- as.matrix(DF_DIST)
# Keep the full matrix for addressing duplicates: Force NA to diagonal
diag(DF_RANK_BASE) <- NA
#----Produce list of one to one distance Metric----
DF_RANK_BASE_1 <- reshape2::melt(DF_RANK_BASE)
names(DF_RANK_BASE_1) <- c("CONTROL","TEST","DIST_Q")
DF_DIST_FINAL <- DF_RANK_BASE_1 %>% na.omit() %>%
dplyr::arrange(TEST,DIST_Q,CONTROL)
#set.seed(17)
if( is.null(test_list)) {
DF_TEST <- df %>% dplyr::sample_n(size = n) # Need to include a InputSelector, sample size of test
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
is.null(test_list)
#set.seed(17)
if( exists(test_list) && is.null(test_list) ) {
DF_TEST <- df %>% dplyr::sample_n(size = n) # Need to include a InputSelector, sample size of test
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
#set.seed(17)
if( exists('test_list') && is.null(test_list) ) {
DF_TEST <- df %>% dplyr::sample_n(size = n) # Need to include a InputSelector, sample size of test
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
#set.seed(17)
if( !exists('test_list') | is.null(test_list) ) {
DF_TEST <- df %>% dplyr::sample_n(size = n) # Need to include a InputSelector, sample size of test
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
test_list <- "NULL"
#set.seed(17)
if( test_list == "NULL") {
DF_TEST <- df %>% dplyr::sample_n(size = n) # Need to include a InputSelector, sample size of test
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
rm(list = ls())
library(TestContR)
library(tidyverse)
library(magrittr)
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
TEST_CONTROL_LIST <- TestContR::match_numeric(df, n = 15)
n <- 5
test_list <- "NULL"
rownames(df) <- df[,1]
df_scaled <- scale(df[,-1])
#---- Build the Distant Matrix----
DF_DIST <- dist(df_scaled , method = "euclidian")
# Convert to Matrix
DF_RANK_BASE <- as.matrix(DF_DIST)
# Keep the full matrix for addressing duplicates: Force NA to diagonal
diag(DF_RANK_BASE) <- NA
#----Produce list of one to one distance Metric----
DF_RANK_BASE_1 <- reshape2::melt(DF_RANK_BASE)
names(DF_RANK_BASE_1) <- c("CONTROL","TEST","DIST_Q")
DF_DIST_FINAL <- DF_RANK_BASE_1 %>% na.omit() %>%
dplyr::arrange(TEST,DIST_Q,CONTROL)
#set.seed(17)
if( test_list == "NULL") {
DF_TEST <- df %>% dplyr::sample_n(size = n) # Need to include a InputSelector, sample size of test
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[,1]))
CONTROL_STR_LIST <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= 1) %>%
dplyr::select(-DIST_RANK) %>%
dplyr::ungroup() %>%
dplyr::mutate(GROUP = dplyr::row_number())
CONTROL_STR_LIST <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= 1) %>%
dplyr::select(-DIST_RANK) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= 1) %>%
dplyr::select(-DIST_RANK) %>%
dplyr::ungroup() %>%
dplyr::mutate(GROUP = dplyr::row_number())
CONTROL_STR_LIST <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= 1) %>%
dplyr::select(-DIST_RANK) %>%
dplyr::ungroup()
CONTROL_STR_LIST
CONTROL_STR_LIST <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= 1) %>%
dplyr::select(-DIST_RANK) %>%
dplyr::ungroup() %>%
dplyr::mutate(GROUP = n())
CONTROL_STR_LIST
CONTROL_STR_LIST <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= 1) %>%
dplyr::select(-DIST_RANK) %>%
dplyr::ungroup() %>%
dplyr::mutate(GROUP = dplyr::row_number(TEST))
CONTROL_STR_LIST
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
rm(TOPN_CONTROL_LIST)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
library(TestContR)
devtools::load_all(".")
rm(TOPN_CONTROL_LIST)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
rm(n)
rm(test_list)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = "NULL")
TOPN_CONTROL_LIST
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = NULL)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = df)
testlist <- df %>% select(state)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = testlist)
testlist <- df %>% select(state) %>% rename(TEST = state)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = testlist)
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
testlist <- df %>% select(state) %>% rename(TEST = state)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = testlist)
testlist
rownames(df) <- df[,1]
df_scaled <- scale(df[,-1])
#---- Build the Distant Matrix----
DF_DIST <- dist(df_scaled , method = "euclidian")
# Convert to Matrix
DF_RANK_BASE <- as.matrix(DF_DIST)
# Keep the full matrix for addressing duplicates: Force NA to diagonal
diag(DF_RANK_BASE) <- NA
#----Produce list of one to one distance Metric----
DF_RANK_BASE_1 <- reshape2::melt(DF_RANK_BASE)
names(DF_RANK_BASE_1) <- c("CONTROL","TEST","DIST_Q")
DF_DIST_FINAL <- DF_RANK_BASE_1 %>% na.omit() %>%
dplyr::arrange(TEST,DIST_Q,CONTROL)
#set.seed(17)
if( is.null(test_list)) {
stop(
'Please provide a dataframe for the test_list "parameter" with 1 Test group or individual in a column named "TEST."\n
See documentation for topn_numeric\'s test_list parameter'
)
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
test_list <- df %>% select(state) %>% rename(TEST = state)
#set.seed(17)
if( is.null(test_list)) {
stop(
'Please provide a dataframe for the test_list "parameter" with 1 Test group or individual in a column named "TEST."\n
See documentation for topn_numeric\'s test_list parameter'
)
} else {
DF_TEST <- as.data.frame(test_list['TEST'])
}
for (k in 1:nrow(DF_TEST)) {
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
}
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
DF_TEST
k <- 1
for (k in 1:nrow(DF_TEST)) {
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
}
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL)
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n)
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q))
CONTROL_STR_LIST_1
n <- 5
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n)
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
rm(CONTROL_STR_LIST)
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
for (k in 1:nrow(DF_TEST)) {
DF_DIST_REDUCED <- DF_DIST_FINAL %>% dplyr::filter(!CONTROL %in% (DF_TEST[k,1])) %>%
dplyr::filter(TEST %in% (DF_TEST[k,1]))
CONTROL_STR_LIST_1 <- DF_DIST_REDUCED %>%
dplyr::group_by(TEST) %>%
dplyr::arrange(DIST_Q, CONTROL) %>%
dplyr::mutate(DIST_RANK = dplyr::min_rank(DIST_Q)) %>%
dplyr::filter(DIST_RANK <= n) %>%
dplyr::ungroup()
CONTROL_STR_LIST <- if (exists('CONTROL_STR_LIST')) {
rbind(CONTROL_STR_LIST,CONTROL_STR_LIST_1)
} else {
CONTROL_STR_LIST_1
}
}
# Output list of Test and Controls
return(CONTROL_STR_LIST)
rm(k)
rm(n)
rm(test_list)
rm(testlist)
library(TestContR)
rm(list = ls())
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
test_list <- df %>% select(state) %>% rename(TEST = state)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = NULL)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
rm(list = ls())
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
TEST_CONTROL_LIST <- TestContR::match_numeric(df, n = 15)
TEST_CONTROL_LIST
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
test_list <- df %>% select(state) %>% rename(TEST = state)
TOPN_CONTROL_LIST <- TestContR::topn_numeric(df, n = 5, test_list = test_list)
TOPN_CONTROL_LIST
library(TestContR)
rm(list = ls())
devtools::release()
install.packages("roxygen2")
install.packages("tidyverse")
rm -Rf C:/Users/marqu/AppData/Local/Temp/RtmpO6NHBG/Rd2pdf22787856311c
library(TestContR)
install.packages("latexpdf")
install.packages("latex2exp")
install.packages("pandoc")
install.packages("pdflatex")
install.packages("devto")
install.packages("ev")
devtools::release()
devtools::install_github("r-lib/devtools")
install.packages("devtools")
library(TestContR)
library(TestContR)
devtools::release()
library(TestContR)
library(TestContR)
devtools::load_all()
devtools::build_win()
library(TestContR)
library(TestContR)
library(TestContR)
library(TestContR)
devtools::load_all()
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
library(tidyverse)
library(magrittr)
df <- datasets::USArrests %>% dplyr::mutate(state = base::row.names(datasets::USArrests)) %>%
dplyr::select(state, everything())
TEST_CONTROL_LIST <- TestContR::match_numeric(df, n = 15)
library(TestContR)
library(TestContR)
TEST_CONTROL_LIST <- TestContR::match_numeric(df, n = 15)
rm(list = ls())
devtools::use_package("magrittr")
library(TestContR)
library(TestContR)
devtools::build_win()
devtools::submit_cran()
install.packages("roxygen2")
devtools::submit_cran()
install.packages("devtools")
install.packages("devtools")
devtools::submit_cran()
devtools::submit_cran()
